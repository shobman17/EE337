C51 COMPILER V9.60.7.0   SERIAL                                                            04/08/2023 15:26:17 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SERIAL
OBJECT MODULE PLACED IN .\Objects\serial.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE serial.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\se
                    -rial.lst) TABS(2) OBJECT(.\Objects\serial.obj)

line level    source

   1          #include <at89c5131.h>
   2          
   3          bit tx_complete = 0,rx_complete = 0; //Bit flags for interrupts
   4          
   5          /**********************************************************
   6             uart_init(): 
   7            Initialization function to be completed
   8            Initializes UART peripheral for 8-bit transfer, 
   9            1 start and 1 stop bits. 
  10            
  11            Please write TH1 value for required baud rate
  12          ***********************************************************/  
  13          void uart_init(void)
  14          {
  15   1        
  16   1        TMOD=0x20;    //Configure Timer 1 in Mode 2 
  17   1        TH1=0xF3;     //Load TH1 for 4800 baud rate  
  18   1        EA=1;       //Enable Global Interrupt
  19   1        ES=1;       //Enable Serial Interrupt
  20   1        SCON=0x50;    //Configure UART for 8-bit data transfer and variable baud rate 
  21   1        TR1=1;        //Start timer 1
  22   1        
  23   1      }
  24          
  25          
  26          /**********************************************************
  27             transmit_char(<unsigned char ch>): 
  28            Transmits a character using UART
  29          ***********************************************************/  
  30          void transmit_char(unsigned char ch)
  31          {
  32   1        SBUF=ch;        //Load data in SBUF
  33   1        while(!tx_complete);      //Wait for tx_complete flag (interrupt to complete)
  34   1        tx_complete = 0;    //Clear tx_complete flag 
  35   1      }
  36          
  37          
  38          /**********************************************************
  39             transmit_string(<String pointer>): 
  40            Transmit a string using UART
  41          ***********************************************************/  
  42          void transmit_string(unsigned char *s)
  43          {
  44   1        while(*s != 0)
  45   1        {
  46   2            transmit_char(*s++);
  47   2        }
  48   1      }
  49          
  50          
  51          /**********************************************************
  52             receive_char(): 
  53            Receives a character through UART. Returns a 
  54            character.
C51 COMPILER V9.60.7.0   SERIAL                                                            04/08/2023 15:26:17 PAGE 2   

  55          ***********************************************************/    
  56          unsigned char receive_char(void)
  57          {
  58   1        unsigned char ch = 0;
  59   1        while(!rx_complete);        //Wait for rx_complete(interrupt to complete)
  60   1        rx_complete = 0;
  61   1        ch = SBUF;          //Read data from SBUF
  62   1        return ch;          //Return read character
  63   1      }
  64          
  65          
  66          /**********************************************************
  67             Serial_ISR(): 
  68            Interrupt service routine for UART interrupt.
  69            Determines whether it is a transmit or receive
  70            interrupt and raise corresponding flag.
  71            Transmit or receive functions (defined above) monitor
  72            for these flags to check if data transfer is done.
  73          ***********************************************************/  
  74          void serial_ISR(void) interrupt 4
  75          {
  76   1          if(TI==1)     //check whether TI is set
  77   1          {
  78   2            TI = 0;     //Clear TI flag
  79   2            tx_complete = 1;  //Set tx_complete flag indicating interrupt completion
  80   2          }
  81   1          else if(RI==1)      //check whether RI is set
  82   1          {
  83   2            RI = 0;     //Clear RI flag
  84   2            rx_complete = 1;  //Set rx_complete flag indicating interrupt completion
  85   2          }
  86   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     87    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
